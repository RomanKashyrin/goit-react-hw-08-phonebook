{"version":3,"file":"static/js/10.da2b6415.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selector.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter.filterInput;","// extracted by mini-css-extract-plugin\nexport default {\"contact_form\":\"ContactForm_contact_form__MxVfX\",\"form_box\":\"ContactForm_form_box__Voyl3\",\"contact_label\":\"ContactForm_contact_label__hQuYE\",\"input_name\":\"ContactForm_input_name__dBk50\",\"input_num\":\"ContactForm_input_num__FpIrZ\",\"contact_btn_add\":\"ContactForm_contact_btn_add__7y97b\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selector';\nimport css from './ContactForm.module.css';\nimport { addContacts } from 'redux/contacts/operations';\n\nconst ContactForm = () => {\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts);\n\n    const handleChange = e => {\n        const prop = e.currentTarget.name;\n        switch (prop) {\n            case 'name':\n                setName(e.currentTarget.value);\n                break;\n            case 'number':\n                setNumber(e.currentTarget.value);\n                break;\n            default:\n                throw new Error('Error');\n        }\n    };\n\n    const addContact = async e => {\n        e.preventDefault();\n\n        const contact = {\n            id: nanoid(),\n            name: name,\n            number: number,\n        };\n\n        const isNameAdded = contact.name.toUpperCase();\n\n        const isAdded = contacts.find(el => {\n            return (el.name.toUpperCase() === isNameAdded);\n        });\n\n        isAdded\n            ? alert(`${contact.name} is already in contacts.`)\n            : dispatch(addContacts(contact));\n\n        setName('');\n        setNumber('');\n    }\n\n    return (\n        <div className={css.form_box}>\n            <form className={css.contact_form} onSubmit={addContact}>\n                <label className={css.contact_label}>\n                    <span className={css.label_text}>Name</span>\n                    <input\n                        className={css.input_name}\n                        value={name}\n                        onChange={handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    />\n                </label>\n\n                <label className={css.contact_label}>\n                    <span className={css.label_text}>Number</span>\n                    <input\n                        className={css.input_num}\n                        value={number}\n                        onChange={handleChange}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                    />\n                </label>\n\n                <button type='submit' className={css.contact_btn_add}>\n                    Add contact\n                </button>\n\n            </form>\n        </div>\n    );\n\n}\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"list_box\":\"ContactList_list_box__S+sDr\",\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"contact_name\":\"ContactList_contact_name__Jt8ih\",\"btn_delete_contact\":\"ContactList_btn_delete_contact__m91NO\"};","// extracted by mini-css-extract-plugin\nexport default {\"notification_box\":\"Notification_notification_box__wPlrL\",\"notification_item\":\"Notification_notification_item__neVx+\",\"notification_text\":\"Notification_notification_text__37XWh\"};","import css from './Notification.module.css';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n    return (\n        <div className={css.notification_box}>\n            <div className={css.notification_item}>\n                <p className={css.notification_text}>{message}</p>\n            </div>\n        </div>\n    );\n}\n\nNotification.protoType = {\n    message: PropTypes.string,\n}\n\nexport default Notification;","import css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notification from 'components/Notification/Notification';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getIsLoading } from 'redux/contacts/selector';\nimport { getFilter } from 'redux/contacts/selector';\n\nconst ContactList = () => {\n    const filterInput = useSelector(getFilter);\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n\n    const getContactsList = () => {\n        const isAddedFilter = filterInput.toLowerCase();\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(isAddedFilter)\n        );\n    };\n\n    const filtredList = getContactsList();\n\n    return (\n        <div className={css.list_box}>\n            <ul className={css.list}>\n                {filtredList.length > 0 ? (\n                    filtredList.map(({ id, name, number }) => (\n                        <li key={id} className={css.item}>\n                            <p className={css.contact_name}>{name} ------------ {number}</p>\n\n                            <button className={css.btn_delete_contact} type='submit' onClick={() => dispatch(deleteContact(id))}>\n                                Delete\n                            </button>\n                        </li>\n                    ))\n                ) : (\n                    <Notification message=\"Contact list is empty\" />\n                )}\n                {isLoading && 'Loading...'}\n            </ul>\n        </div>\n\n    );\n}\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"filter_box\":\"Filter_filter_box__FAu5q\",\"filter_tittle\":\"Filter_filter_tittle__zGYJO\",\"filter_input\":\"Filter_filter_input__eu2zm\"};","import css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filterItems } from 'redux/contacts/filterSlice';\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const filterChange = e => {\n        dispatch(filterItems(e.currentTarget.value));\n    }\n\n    return (\n        <div className={css.filter_box}>\n            <label>\n                <span className={css.filter_tittle}>Find contacts by name</span>\n                <input type=\"name\" onChange={filterChange} \n                    className={css.filter_input}\n                />\n            </label>\n        </div>\n    );\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"contacts_box\":\"Contacts_contacts_box__1wn7y\",\"contacts_title\":\"Contacts_contacts_title__GWkaZ\",\"contacts_name\":\"Contacts_contacts_name__DceoE\"};","import ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport css from './Contacts.module.css';\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Your contacts</title>\n            </Helmet>\n\n            <div className={css.contacts_box}>\n                <h1 className={css.contacts_title}>Phonebook</h1>\n                <ContactForm />\n                <h2 className={css.contacts_name}>Contacts</h2>\n                <Filter />\n                <ContactList />\n            </div>\n        </>\n    );\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","filterInput","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","Error","addContact","preventDefault","contact","isNameAdded","find","el","alert","addContacts","className","css","onSubmit","onChange","type","pattern","title","required","Notification","message","protoType","PropTypes","filtredList","isAddedFilter","toLowerCase","includes","getContactsList","length","map","onClick","deleteContact","filterItems","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}